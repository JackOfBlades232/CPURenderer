Obj reader (not from beginning):
* Impl file read state (for storing vertices, materials, etc.)
* Impl mtl file parsing with mat_buf and mapping fill
* Impl usemtl (setting cur mat) and applying to objects
* Impl v/vt/vn parsing with storing in buf
* Impl f parsing
    * Impl get_index with neg indices
    * Impl parsing of f item (number, /, //)
    * Impl triangle slicing

Add debug modes:
* Normal: color = 1/2normal + 1/2, where normal turned away from camera
* Depth: color = depth/max depth (black-white)

Make classic box work:
* Remake camera init to look-at
* Debug and fix classic-box

Add vertex normals to triangles (and obj parsing):
* Add vn1, vn2, vn3, has_vnorm to triangle (should i normalize vns themselves?)
* Implement calculation of triangle normal with bar coords
    Coords are already calculated in intersection algo

Add reflection and refraction:
* Study the formulas
* Make some global rec depth param in test.c
* Impl reflection
* Impl refraction and run all tests

Improvements:
* Add C^2 to post-proc
* Offset ray orig by epsilon before every from-obj casting
* Add separate render opts for all test cases
- Optimize: set bit flags/checks for zeroeness of material properties:
    * Check al values
    - Check kd-ks for spec/diffuse
- Make all pos-neg checks >= EPSILON (grep)
- Move calculation of some things from *_illum methods to shade (to calc once)
- Fix dull colors in "box" (refraction)

Further improvements:
- Improve speed with BVH
- Uncomment vt reading and implement texturing
